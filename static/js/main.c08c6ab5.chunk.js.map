{"version":3,"sources":["Word.js","NameForm.js","List.js","Countdown.js","Board.js","index.js"],"names":["Word","name","guessed","Object","classCallCheck","this","NameForm","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","value","callback","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","preventDefault","react_default","a","createElement","onSubmit","className","type","placeholder","onChange","autoFocus","aria-describedby","id","React","Component","List","list","words","map","word","index","setup","key","guessing","Countdown","seconds","active","start","decreaseTime","startCallback","setTimeout","endCallback","document","getElementById","play","onClick","Board","rounds","initialState","labels","guessedLabels","round","resetGame","labelsContains","addLabel","checkProgression","startGame","progressRound","shuffle","guessTop","passTop","startGuessing","stopGuessing","contains","forEach","trim","slice","push","length","i","j","Math","floor","random","temp","first","shift","src_List","src_NameForm","pass","controls","countdown","src_Countdown","guessedWords","ReactDOM","render","src_Board"],"mappings":"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","file":"static/js/main.c08c6ab5.chunk.js","sourcesContent":["class Word {\n    constructor(name, guessed) {\n        this.name = name;\n        this.guessed = guessed;\n    }\n}\n\nexport default Word;\n","import React from 'react';\n\nclass NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '', callback: props.callback };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.state.callback(this.state.value);\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"input-group mb-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"What should be guessed?\" value={this.state.value} onChange={this.handleChange} autoFocus aria-describedby=\"add-button\" />\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-outline-secondary\" type=\"submit\" id=\"add-button\">Add</button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default NameForm;\n","import React from 'react';\n\nclass List extends React.Component {\n    render() {\n        let list = this.props.words.map((word, index) => {\n            if (this.props.setup) {\n                // during setup, show all words\n                return <li className=\"list-group-item\" key={word.name}>{word.name}</li>;\n            } else {\n                if (word.guessed) {\n                    // during the game, show all guessed words\n                    return <li className=\"list-group-item disabled\" key={word.name}>{word.name}</li>;\n                } else {\n                    if (this.props.guessing && index === 0) {\n                        // during the game, show only the top word from the active stack\n                        return <li className=\"list-group-item active\" key={word.name}>{word.name}</li>;\n                    } else {\n                        return <li className=\"list-group-item blurry\" key={word.name}>{word.name}</li>;\n                    }\n                }\n            }\n        });\n        return (\n            <ul className=\"list-group\">\n                {list}\n            </ul>\n        );\n    }\n}\n\nexport default List;\n","import React from 'react';\n\nclass Countdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: props.seconds,\n            active: false,\n        }\n\n        this.start = this.start.bind(this);\n        this.decreaseTime = this.decreaseTime.bind(this);\n    }\n\n    start() {\n        this.props.startCallback();\n        this.setState({ active: true });\n        setTimeout(this.decreaseTime, 1000);\n    }\n\n    decreaseTime() {\n        if (this.state.seconds !== 0) {\n            let seconds = this.state.seconds - 1;\n            this.setState({ seconds: seconds });\n            setTimeout(this.decreaseTime, 1000);\n        } else {\n            this.props.endCallback();\n            let audio = document.getElementById(\"warning\");\n            audio.play();\n            this.setState({ seconds: this.props.seconds, active: false });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.active && <button className=\"btn btn-danger\" type=\"button\" onClick={this.start}>Start</button>}<p>{this.state.seconds} seconds remaining.</p>\n            </div>\n        );\n    }\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport Word from './Word';\nimport NameForm from './NameForm';\nimport List from './List';\nimport Countdown from './Countdown';\nimport './index.css';\n\nclass Board extends React.Component {\n    rounds = [\n        \"Első kör nincs passz, akárhány tipp, mindent lehet, kivéve kimondani a keresett szót\",\n        \"Második körtől végig van passz, de csak egy tipp van, ha félre, akkor megy az aljára. Második körben max egy szó, mutogatás, hangutánzás bármennyi és mutogatás\",\n        \"Harmadik kör csak mutogatás\",\n        \"Negyedik kör egy póz\",\n    ];\n\n    initialState = {\n        labels: [],\n        guessedLabels: [],\n        round: 1,\n        setup: true,\n        guessing: false,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.resetGame = this.resetGame.bind(this);\n        this.labelsContains = this.labelsContains.bind(this);\n        this.addLabel = this.addLabel.bind(this);\n        this.checkProgression = this.checkProgression.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.progressRound = this.progressRound.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.guessTop = this.guessTop.bind(this);\n        this.passTop = this.passTop.bind(this);\n        this.startGuessing = this.startGuessing.bind(this);\n        this.stopGuessing = this.stopGuessing.bind(this);\n    }\n\n    resetGame() {\n        this.setState(this.initialState);\n    }\n\n    labelsContains(name) {\n        let contains = false;\n        this.state.labels.forEach(word => {\n            if (word.name === name) {\n                contains = true;\n            }\n        });\n        return contains;\n    }\n\n    addLabel(name) {\n        name = name.trim();\n        if (name !== \"\" && !this.labelsContains(name)) {\n            const labels = this.state.labels.slice();\n            labels.push(new Word(name, false));\n            this.setState({ labels: labels });\n        }\n    }\n\n    checkProgression() {\n        if (this.state.labels.length === 0) {\n            if (this.state.round === 4) {\n                this.resetGame();\n            } else {\n                this.stopGuessing();\n                this.progressRound();\n                const guessedLabels = this.state.guessedLabels.slice();\n                guessedLabels.forEach((word) => { word.guessed = false; });\n                this.setState({ labels: guessedLabels, guessedLabels: [] }, this.shuffle);\n            }\n        }\n    }\n\n    startGame() {\n        if (this.state.labels.length !== 0) {\n            this.setState({ setup: false }, this.shuffle);\n        }\n    }\n\n    progressRound() {\n        let round = this.state.round + 1;\n        this.setState({ round: round });\n    }\n\n    shuffle() {\n        const labels = this.state.labels.slice();\n        for (let i = labels.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = labels[i];\n            labels[i] = labels[j];\n            labels[j] = temp;\n        }\n        this.setState({ labels: labels });\n    }\n\n    guessTop() {\n        const labels = this.state.labels.slice();\n        const guessedLabels = this.state.guessedLabels.slice();\n        const first = labels.shift();\n        first.guessed = true;\n        guessedLabels.push(first);\n        this.setState({ labels: labels, guessedLabels: guessedLabels }, this.checkProgression);\n    }\n\n    passTop() {\n        const labels = this.state.labels.slice();\n        const first = labels.shift();\n        labels.push(first);\n        this.setState({ labels: labels });\n    }\n\n    startGuessing() {\n        this.setState({ guessing: true });\n    }\n\n    stopGuessing() {\n        this.passTop();\n        this.setState({ guessing: false });\n    }\n\n    render() {\n        let words = <List words={this.state.labels} setup={this.state.setup} guessing={this.state.guessing} />;\n\n        if (this.state.setup) {\n            return (\n                <div className=\"container\">\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            <h1>Add your list of words</h1>\n                            <NameForm callback={this.addLabel} />\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.startGame}>Start Game</button>\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {words}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            let pass = this.state.round !== 1 && <button className=\"btn btn-info m-1\" type=\"button\" onClick={this.passTop}>Passed</button>;\n            let controls = <div><button className=\"btn btn-success m-1\" type=\"button\" onClick={this.guessTop}>Guessed</button>{pass}</div>;\n            let countdown = <Countdown seconds=\"30\" startCallback={this.startGuessing} endCallback={this.stopGuessing} key={this.state.round} />;\n            let guessedWords = <List words={this.state.guessedLabels} setup={this.state.setup} guessing={this.state.guessing} />;\n\n            return (\n                <div className=\"container\">\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            <p>{this.rounds[this.state.round - 1]}</p>\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {this.state.guessing && controls}\n                            {countdown}\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {words}\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {guessedWords}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Board from './Board';\n\nReactDOM.render(\n    <Board />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}