{"version":3,"sources":["Word.js","NameForm.js","List.js","Countdown.js","Board.js","index.js"],"names":["Word","name","guessed","Object","classCallCheck","this","NameForm","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","value","callback","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","preventDefault","react_default","a","createElement","onSubmit","className","type","placeholder","onChange","autoFocus","aria-describedby","id","React","Component","List","list","words","map","word","index","setup","key","onClick","remove","guessing","Countdown","seconds","active","timeout","start","decreaseTime","startCallback","setTimeout","clearTimeout","endCallback","document","getElementById","play","Board","rounds","Storage","localStorage","savedState","JSON","parse","labels","guessedLabels","round","resetGame","labelsContains","addLabel","removeLabel","checkProgression","startGame","progressRound","shuffle","guessTop","passTop","startGuessing","stopGuessing","saveState","copy","stringify","slice","concat","forEach","contains","trim","push","splice","length","i","j","Math","floor","random","temp","first","shift","src_List","src_NameForm","pass","controls","countdown","src_Countdown","guessedWords","class","role","ReactDOM","render","src_Board"],"mappings":"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","file":"static/js/main.1297ad06.chunk.js","sourcesContent":["class Word {\n    constructor(name, guessed) {\n        this.name = name;\n        this.guessed = guessed;\n    }\n}\n\nexport default Word;\n","import React from 'react';\n\nclass NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '', callback: props.callback };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.state.callback(this.state.value);\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"input-group mb-3\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"What should be guessed?\" value={this.state.value} onChange={this.handleChange} autoFocus aria-describedby=\"add-button\" />\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-success\" type=\"submit\" id=\"add-button\">Add</button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default NameForm;\n","import React from 'react';\n\nclass List extends React.Component {\n    render() {\n        let list = this.props.words.map((word, index) => {\n            if (this.props.setup) {\n                // during setup, show all words\n                return <li className=\"list-group-item d-flex justify-content-between align-items-center\" key={word.name}>{word.name}\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.props.remove(index)}>Remove</button></li>;\n            } else {\n                if (word.guessed) {\n                    // during the game, show all guessed words\n                    return <li className=\"list-group-item disabled\" key={word.name}>{word.name}</li>;\n                } else {\n                    if (this.props.guessing && index === 0) {\n                        // during the game, show only the top word from the active stack\n                        return <li className=\"list-group-item active\" key={word.name}>{word.name}</li>;\n                    } else {\n                        return <li className=\"list-group-item blurry\" key={word.name}>{word.name}</li>;\n                    }\n                }\n            }\n        });\n        return (\n            <ul className=\"list-group\">\n                {list}\n            </ul>\n        );\n    }\n}\n\nexport default List;\n","import React from 'react';\n\nclass Countdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: props.seconds,\n            active: false,\n            timeout: null,\n        }\n\n        this.start = this.start.bind(this);\n        this.decreaseTime = this.decreaseTime.bind(this);\n    }\n\n    start() {\n        this.props.startCallback();\n        let timeout = setTimeout(this.decreaseTime, 1000);\n        this.setState({ active: true, timeout: timeout });\n    }\n\n    componentWillUnmount() {\n        if (this.state.timeout) {\n            clearTimeout(this.state.timeout);\n        }\n    }\n\n    decreaseTime() {\n        if (this.state.seconds !== 0) {\n            let seconds = this.state.seconds - 1;\n            let timeout = setTimeout(this.decreaseTime, 1000);\n            this.setState({ seconds: seconds, timeout: timeout });\n        } else {\n            this.props.endCallback();\n            let audio = document.getElementById(\"warning\");\n            audio.play();\n            this.setState({ seconds: this.props.seconds, active: false });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.active && <button className=\"btn btn-danger float-right\" type=\"button\" onClick={this.start}>Start</button>}<p>{this.state.seconds} seconds remaining.</p>\n            </div>\n        );\n    }\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport Word from './Word';\nimport NameForm from './NameForm';\nimport List from './List';\nimport Countdown from './Countdown';\nimport './index.css';\n\nclass Board extends React.Component {\n    rounds = [\n        <ul><li>You can talk or act as much as you want</li><li>You can not say the given word</li><li>The guessing player has unlimited guesses, but you cannot move on if they did not guess correctly</li></ul>,\n        <ul><li>From now on either you or the guessing player are allowed to pass, and move on to the next word</li><li>You can only say a single word</li><li>You can act</li><li>You can imitate sounds</li></ul>,\n        <ul><li>You can only act</li></ul>,\n        <ul><li>You can only do a single pose</li><li>The guessing player must cover his eyes while you're setting up; say a given word (\"go!\") when you have settled into the pose</li></ul>,\n    ];\n\n    constructor(props) {\n        super(props);\n\n        let localStorageExists = typeof (Storage) !== 'undefined';\n\n        if (localStorageExists && localStorage.savedState) {\n            this.state = JSON.parse(localStorage.savedState);\n        } else {\n            this.state = {\n                labels: [],\n                guessedLabels: [],\n                round: 1,\n                setup: true,\n                guessing: false,\n            };\n        }\n\n        this.resetGame = this.resetGame.bind(this);\n        this.labelsContains = this.labelsContains.bind(this);\n        this.addLabel = this.addLabel.bind(this);\n        this.removeLabel = this.removeLabel.bind(this);\n        this.checkProgression = this.checkProgression.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.progressRound = this.progressRound.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.guessTop = this.guessTop.bind(this);\n        this.passTop = this.passTop.bind(this);\n        this.startGuessing = this.startGuessing.bind(this);\n        this.stopGuessing = this.stopGuessing.bind(this);\n        this.saveState = this.saveState.bind(this);\n    }\n\n    saveState() {\n        // make a deep copy of the state\n        let copy = JSON.parse(JSON.stringify(this.state));\n        copy.guessing = false;\n        localStorage.savedState = JSON.stringify(copy);\n    }\n\n    resetGame() {\n        let copy = this.state.guessedLabels.slice().concat(this.state.labels.slice());\n        copy.forEach((word) => word.guessed = false);\n        this.setState({\n            labels: copy,\n            guessedLabels: [],\n            round: 1,\n            setup: true,\n            guessing: false,\n        }, this.saveState);\n    }\n\n    labelsContains(name) {\n        let contains = false;\n        this.state.labels.forEach(word => {\n            if (word.name === name) {\n                contains = true;\n            }\n        });\n        return contains;\n    }\n\n    addLabel(name) {\n        name = name.trim();\n        if (name !== \"\" && !this.labelsContains(name)) {\n            const labels = this.state.labels.slice();\n            labels.push(new Word(name, false));\n            this.setState({ labels: labels }, this.saveState);\n        }\n    }\n\n    removeLabel(index) {\n        let copy = this.state.labels.slice();\n        copy.splice(index, 1);\n        this.setState({ labels: copy }, this.saveState);\n    }\n\n    checkProgression() {\n        if (this.state.labels.length === 0) {\n            if (this.state.round === 4) {\n                this.resetGame();\n            } else {\n                this.stopGuessing();\n                this.progressRound();\n                const guessedLabels = this.state.guessedLabels.slice();\n                guessedLabels.forEach((word) => { word.guessed = false; });\n                this.setState({ labels: guessedLabels, guessedLabels: [] }, this.shuffle);\n            }\n        } else {\n            this.saveState();\n        }\n    }\n\n    startGame() {\n        if (this.state.labels.length !== 0) {\n            this.setState({ setup: false }, this.shuffle);\n        }\n    }\n\n    progressRound() {\n        let round = this.state.round + 1;\n        this.setState({ round: round }, this.saveState);\n    }\n\n    shuffle() {\n        const labels = this.state.labels.slice();\n        for (let i = labels.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = labels[i];\n            labels[i] = labels[j];\n            labels[j] = temp;\n        }\n        this.setState({ labels: labels }, this.saveState);\n    }\n\n    guessTop() {\n        const labels = this.state.labels.slice();\n        const guessedLabels = this.state.guessedLabels.slice();\n        const first = labels.shift();\n        first.guessed = true;\n        guessedLabels.push(first);\n        this.setState({ labels: labels, guessedLabels: guessedLabels }, this.checkProgression);\n    }\n\n    passTop() {\n        const labels = this.state.labels.slice();\n        const first = labels.shift();\n        labels.push(first);\n        this.setState({ labels: labels }, this.saveState);\n    }\n\n    startGuessing() {\n        this.setState({ guessing: true }, this.saveState);\n    }\n\n    stopGuessing() {\n        this.passTop();\n        this.setState({ guessing: false }, this.saveState);\n    }\n\n    render() {\n        let words = <List words={this.state.labels} setup={this.state.setup} guessing={this.state.guessing} remove={this.removeLabel} />;\n\n        if (this.state.setup) {\n            return (\n                <div className=\"container\">\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            <h1>Add your list of words</h1>\n                            <NameForm callback={this.addLabel} />\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={this.startGame}>Start Game</button>\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {words}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            let pass = this.state.round !== 1 && <button className=\"btn btn-info m-1\" type=\"button\" onClick={this.passTop}>Passed</button>;\n            let controls = <div><button className=\"btn btn-success\" type=\"button\" onClick={this.guessTop}>Guessed</button>{pass}</div>;\n            let countdown = <Countdown seconds=\"30\" startCallback={this.startGuessing} endCallback={this.stopGuessing} key={this.state.round} />;\n            let guessedWords = <List words={this.state.guessedLabels} setup={this.state.setup} guessing={this.state.guessing} />;\n\n            return (\n                <div className=\"container\">\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            <div class=\"alert alert-info\" role=\"alert\">\n                                <h4 class=\"alert-heading\">Round {this.state.round}</h4>\n                                <p>{this.rounds[this.state.round - 1]}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {this.state.guessing && controls}\n                            {countdown}\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {words}\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            {guessedWords}\n                        </div>\n                    </div>\n                    <div className=\"row p-2\">\n                        <div className=\"col\">\n                            <button className=\"btn btn-danger\" onClick={this.resetGame}>Reset game</button>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Board from './Board';\n\nReactDOM.render(\n    <Board />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}