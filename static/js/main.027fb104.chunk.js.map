{"version":3,"sources":["Word.js","NameForm.js","List.js","Countdown.js","Board.js","index.js"],"names":["Word","name","guessed","Object","classCallCheck","this","NameForm","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","value","callback","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","preventDefault","react_default","a","createElement","onSubmit","type","onChange","React","Component","List","list","words","map","word","index","setup","key","guessing","Countdown","seconds","active","start","decreaseTime","startCallback","setTimeout","endCallback","onClick","Board","rounds","labels","guessedLabels","round","labelsContains","addLabel","checkProgression","startGame","progressRound","shuffle","guessTop","passTop","startGuessing","stopGuessing","contains","forEach","trim","slice","push","length","i","j","Math","floor","random","temp","first","shift","src_List","controls","src_NameForm","instructions","className","countdown","src_Countdown","guessedWords","Game","src_Board","ReactDOM","render","src_Game","document","getElementById"],"mappings":"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","file":"static/js/main.027fb104.chunk.js","sourcesContent":["class Word {\n    constructor(name, guessed) {\n        this.name = name;\n        this.guessed = guessed;\n    }\n}\n\nexport default Word;\n","import React from 'react';\n\nclass NameForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '', callback: props.callback };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.state.callback(this.state.value);\n        this.setState({ value: '' });\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Name:\n            <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        );\n    }\n}\n\nexport default NameForm;\n","import React from 'react';\n\nclass List extends React.Component {\n    render() {\n        let list = this.props.words.map((word, index) => {\n            if (this.props.setup) {\n                // during setup, show all words\n                return <li key={word.name}>{word.name}</li>;\n            } else {\n                if (word.guessed) {\n                    // during the game, show all guessed words\n                    return <li key={word.name}><del>{word.name}</del></li>;\n                } else {\n                    if (this.props.guessing && index === 0) {\n                        // during the game, show only the top word from the active stack\n                        return <li key={word.name}>{word.name}</li>;\n                    }\n                }\n            }\n            return null;\n        });\n        return (\n            <ul>\n                {list}\n            </ul>\n        );\n    }\n}\n\nexport default List;\n","import React from 'react';\n\nclass Countdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: props.seconds,\n            active: false,\n        }\n\n        this.start = this.start.bind(this);\n        this.decreaseTime = this.decreaseTime.bind(this);\n    }\n\n    start() {\n        this.props.startCallback();\n        this.setState({ active: true });\n        setTimeout(this.decreaseTime, 1000);\n    }\n\n    decreaseTime() {\n        if (this.state.seconds !== 0) {\n            let seconds = this.state.seconds - 1;\n            this.setState({ seconds: seconds });\n            setTimeout(this.decreaseTime, 1000);\n        } else {\n            this.props.endCallback();\n            this.setState({ seconds: this.props.seconds, active: false });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.seconds} seconds remainig.\n                {!this.state.active && <input type=\"submit\" value=\"Start\" onClick={this.start} />}\n            </div>\n        );\n    }\n}\n\nexport default Countdown;\n","import React from 'react';\n\nimport Word from './Word';\nimport NameForm from './NameForm';\nimport List from './List';\nimport Countdown from './Countdown';\n\nclass Board extends React.Component {\n    rounds = [\n        \"Első kör nincs passz, akárhány tipp, mindent lehet, kivéve kimondani a keresett szót\",\n        \"Második körtől végig van passz, de csak egy tipp van, ha félre, akkor megy az aljára. Második körben max egy szó, mutogatás, hangutánzás bármennyi és mutogatás\",\n        \"Harmadik kör csak mutogatás\",\n        \"Negyedik kör egy póz\",\n    ];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            labels: [],\n            guessedLabels: [],\n            round: 1,\n            setup: true,\n            guessing: false,\n        }\n        this.labelsContains = this.labelsContains.bind(this);\n        this.addLabel = this.addLabel.bind(this);\n        this.checkProgression = this.checkProgression.bind(this);\n        this.startGame = this.startGame.bind(this);\n        this.progressRound = this.progressRound.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.guessTop = this.guessTop.bind(this);\n        this.passTop = this.passTop.bind(this);\n        this.startGuessing = this.startGuessing.bind(this);\n        this.stopGuessing = this.stopGuessing.bind(this);\n    }\n\n    labelsContains(name) {\n        let contains = false;\n        this.state.labels.forEach(word => {\n            if (word.name === name) {\n                contains = true;\n            }\n        });\n        return contains;\n    }\n\n    addLabel(name) {\n        name = name.trim();\n        if (name !== \"\" && !this.labelsContains(name)) {\n            const labels = this.state.labels.slice();\n            labels.push(new Word(name, false));\n            this.setState({ labels: labels });\n        }\n    }\n\n    checkProgression() {\n        if (this.state.labels.length === 0) {\n            this.stopGuessing();\n            this.progressRound();\n            const guessedLabels = this.state.guessedLabels.slice();\n            guessedLabels.forEach((word) => {word.guessed = false;});\n            this.setState({ labels: guessedLabels, guessedLabels: [] }, this.shuffle);\n        }\n    }\n\n    startGame() {\n        if (this.state.labels.length !== 0) {\n            this.setState({ setup: false }, this.shuffle);\n        }\n    }\n\n    progressRound() {\n        let round = this.state.round + 1;\n        this.setState({ round: round });\n    }\n\n    shuffle() {\n        const labels = this.state.labels.slice();\n        for (let i = labels.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            let temp = labels[i];\n            labels[i] = labels[j];\n            labels[j] = temp;\n        }\n        this.setState({ labels: labels });\n    }\n\n    guessTop() {\n        const labels = this.state.labels.slice();\n        const guessedLabels = this.state.guessedLabels.slice();\n        const first = labels.shift();\n        first.guessed = true;\n        guessedLabels.push(first);\n        this.setState({ labels: labels, guessedLabels: guessedLabels }, this.checkProgression);\n    }\n\n    passTop() {\n        const labels = this.state.labels.slice();\n        const first = labels.shift();\n        labels.push(first);\n        this.setState({ labels: labels });\n    }\n\n    startGuessing() {\n        this.setState({ guessing: true });\n    }\n\n    stopGuessing() {\n        this.passTop();\n        this.setState({ guessing: false });\n    }\n\n    render() {\n        let words = <List words={this.state.labels} setup={this.state.setup} guessing={this.state.guessing} />;\n\n        if (this.state.setup) {\n            let controls = <div><NameForm callback={this.addLabel} /><input type=\"button\" value=\"Start\" onClick={this.startGame} /></div>;\n\n            return (\n                <div>\n                    {controls}\n                    {words}\n                </div>\n            );\n        } else {\n            let controls = <div><input type=\"button\" value=\"Guessed\" onClick={this.guessTop} /><input type=\"button\" value=\"Pass\" onClick={this.passTop} /></div>;\n            let instructions = <div className=\"instructions\">{this.state.round > 0 && this.rounds[this.state.round - 1]}</div>;\n            let countdown = <Countdown seconds=\"30\" startCallback={this.startGuessing} endCallback={this.stopGuessing} key={this.state.round} />;\n            let guessedWords = <List words={this.state.guessedLabels} setup={this.state.setup} guessing={this.state.guessing} />;\n\n            return (\n                <div>\n                    {this.state.guessing && controls}\n                    {instructions}\n                    {countdown}\n                    {words}\n                    {guessedWords}\n                </div>\n            );\n        }\n    }\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Board from './Board';\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}